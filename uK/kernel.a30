;///////////////////////////////////////
;セクション定義
;---------------------------------------
; データセクション
	.section data_NE,DATA
	.section data_NO,DATA
	.section bss_NE,DATA
	.section bss_NO,DATA
	.section data_NEI,ROMDATA
	.section data_NOI,ROMDATA
	
;---------------------------------------  
; スタックセクション
	.section stack,DATA
	
	.glb _init_task_stack
	.glb _diag_task_stack
	.glb _task1_stack
	.glb _task2_stack
	.glb _task3_stack
	.glb _task4_stack
	.glb _task5_stack
	.glb _task6_stack
	
	.blkb 512 ;256
kernel_stack:


  .blkb 128
_init_task_stack:
  .blkb 128
_diag_task_stack:
  .blkb 128
_task1_stack:
  .blkb 128
_task2_stack:
  .blkb 128
_task3_stack:
  .blkb 128
_task4_stack:
  .blkb 128
_task5_stack:
  .blkb 128
_task6_stack:


;///////////////////////////////////////
;シンボル定義
;---------------------------------------
; システムコールID
STARTTASK	.equ 0
EXIT		.equ 1
PAUSE		.equ 2
RESUMETASK	.equ 3
RESETTASK	.equ 4
GETTID		.equ 5
TAKESEMA	.equ 6
GIVESEMA	.equ 7
TASSEMA		.equ 8
HOOKITTASK	.equ 9


;---------------------------------------
; プログラムセクション
	.section program,CODE
;外部参照であることを宣言する
	.glb _kernel_start
	.glb startup


;///////////////////////////////////////
;スタートアップルーチンの処理がここから始まる
startup:
; 割り込み禁止
 	fclr i
 
; スタックポインタの設定(カーネル用スタック)
 	ldc  #kernel_stack,ISP 
 	
; 割り込みベクタの設定
 	ldintb  #0fbd00h	; INTBレジスタにFBD00hを格納する

;ハードウェアレジスタを初期化する
	MOV.B	#02h,000Ah	; プロテクトレジスタ←02h
	MOV.B	#41h,0004h	; プロセッサモードレジスタ0← 41h
	MOV.B	#00h,0005h	; プロセッサモードレジスタ1← 00h
	MOV.B	#08h,0008h	; チップセレクト制御レジスタ← 08h 
	MOV.B	#00h,000Ah	; プロテクトレジスタ←00h
	
; RAMの初期化
 	; SMOVFを使うために、
 	mov.b #topof data_NEI >> 16,R1H		 ; 転送元アドレス上位4ビットをR1Hに格納する。
 	mov.w #topof data_NEI & 0FFFFh,A0	 ; 転送元アドレス下位16ビットをA0に格納する。
 	mov.w #topof data_NE,A1				 ; 転送先アドレスをA1に格納する。
 	mov.w #sizeof data_NE,R3			 ; 転送回数をR3に格納する。
 	smovf.b 
  
 	mov.b #topof data_NOI >> 16,R1H
 	mov.w #topof data_NOI & 0FFFFh,A0
 	mov.w #topof data_NO,A1
	mov.w #sizeof data_NO,R3
	smovf.b
  
	;sstr を使うために
	mov.b #0,R0L			; R0にストアするデータを格納する。
	mov.w #topof bss_NE,A1	; A1に転送先アドレスを格納する。
	mov.w #sizeof bss_NE,R3 ; R3に転送回数を格納する。
	sstr.b

	mov.w #topof bss_NO,A1
	mov.w #sizeof bss_NO,R3
	sstr.b

; 割り込み許可
	fset i

	JMP	_kernel_start	;ラベル _kernel_start に無条件分岐する
	
;---------------------------------------
; ディスパッチ処理
	.glb _dispatcher
_dispatcher:
	ldc  a0,ISP
	popm r0,r1,r2,r3,a0,a1,sb,fb
	reit

;---------------------------------------
; 割り込み処理
	.glb sw2_int
	sw2_int:
; レジスタを退避する
	pushm r0,r1,r2,r3,a0,a1,sb,fb
   
	.glb _led_type1
	jsr _led_type1	; 上で定義したC関数へ
	
; レジスタを復帰する
	popm r0,r1,r2,r3,a0,a1,sb,fb
	reit

;---------------------------------------
; システムコール
SOFTINT .equ 32

; システムコールエントリ
	.glb _SVC_startTASK
_SVC_startTASK:
 	mov.w #STARTTASK,R0
	int   #SOFTINT  ;ソフトウェア割り込み
 	rts
  
	.glb _SVC_exit
_SVC_exit:
	mov.w #EXIT,R0
	int   #SOFTINT
	rts

	.glb _SVC_pause
_SVC_pause:
	mov.w #PAUSE,R0
	int   #SOFTINT
	rts
	
	.glb _SVC_resumeTASK
_SVC_resumeTASK:
	mov.w #RESUMETASK,R0
	int   #SOFTINT
	rts

;---------------------------------------
; ソフトウェア割り込み処理
	.glb software_int
software_int:

;(1)割込み発生
;　 PCとFLGは自動的にスタックに退避されている。
;　 この状態では、ISPの内容は実行中のタスクの
;　 最新（カレント）スタックポインタ値である。

;(2)コンテキスト退避
;　 PUSHメモリにより各レジスタの内容をスタック上に退避する。
	pushm r0,r1,r2,r3,a0,a1,sb,fb

;(3)実行中のタスクの番号をrunregから調べる。
;   runregの内容は0からNTASK-1の間である｡
	.glb	_runreg		 ;runregを外部参照
	mov.b	_runreg, R1H ;read address of runreg into R1H
	
;(4)runregから求めたTCBのTCB+12、13　に
;   再開のためのISPの内容をセット
	.glb	_tcb		;tcbを外部参照
	mov.w	#_tcb, A0	;tcb先頭アドレス -> A0
	sha.b	#4,	R1H		;runreg << 4 (ex TASK2 0x02 -> 0x20
	adc.b	R1H, A0		;tcbにrunregを足すことで配列を移動
	adc.w	#12, A0		;TCB[runreg] + 12 13
	stc		ISP, [A0]	;ISPの内容をセット
	
;(5)ISPに、カーネルのスタックアドレスを代入する。
	ldc		#kernel_stack,ISP

;(6)割込み処理の各モジュールへJUMPする。
	.glb	_syscall_entry
	JMP		_syscall_entry


	.end				;プログラムの終わり